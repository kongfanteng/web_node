/**
 * @example
 *
 * ```js
    // Database-MySQL-Web 开发模式
    // - 1、Web 开发模式
    // - - 目前主流的 Web 开发模式有两种，分别是：
    // - - - 1）基于服务器渲染的传统 Web 开发模式
    // - - - 2）基于前后端分离的新型 Web 开发模式

    // - 2、服务器渲染的 Web 开发模式
    // - - 服务端渲染的概念：服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接，动态生成的。因此，需要使用 Ajax 这样的技术额外请求页面的数据。代码示例如下：
    app.get('/index.html', (req, res) => {
      // 1、要渲染的数据，命名 user
      const user = { username: 'kft', age: 30 }
      // 2、服务器通过字符串拼接，动态生成 HTML 内容，命名 html
      const html = `<h1>姓名：${user.username}，年龄：${user.age}</h1>`
      // 3、把生成好的页面响应给客户端。因此，客户端拿到的是带有真实数据的 HTML 页面
      res.send(html)
    })

    // - 3、服务器渲染的优缺点
    // - - 优点：
    // - - - 1）前端耗时少。因为服务器端负责动态生成 HTML 内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省时间。
    // - - - 2）有利于 SEO。因为服务器端响应的是完整的 HTML 页面内容，所以爬虫更容易爬取获得信息，更有利于 SEO。
    // - - 缺点：
    // - - - 1）占用服务器端资源。即服务器端完成 HTML 页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力。
    // - - - 2）不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于项目高效开发。

    // - 4、前后端分离的 Web 开发模式
    // - - 前后端分离的概念：前后端分离的开发模式，依赖于 Ajax 技术的广泛应用。简而言之，前后端分离的 Web 开发模式，就是后端只负责提供 API 接口，前端使用 Ajax 调用接口的开发模式。

    // - 5、前后端分离的优缺点
    // - - 优点：
    // - - - 1）开发体验好。前端专注于 UI 页面的开发，后端专注于 API 的开发，且前端有更多的选择性
    // - - - 2）用户体验好。Ajax 技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。
    // - - - 3）减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器生成的。
    // - - 缺点：
    // - - - 1）不利于 SEO。因为完整的 HTML 页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。（解决方案：利用 Vue、React 等前端框架的 SSR（server side render）技术能够很好的解决 SEO 问题！）

    // - 6、如何选择 Web 开发模式
    // - - 不谈业务场景而盲目选择使用何种开发模式都是耍流氓。
    // - - - 比如企业级网站，主要功能是展示而没有复杂的交互，并且需要良好的 SEO，则这时我们就需要使用服务器渲染；
    // - - - 而类似于后台管理系统，交互性比较强，不需要考虑 SEO，那么就可以使用前后端分离的开发模式。
    // - - 另外，具体使用何种开发模式并不是绝对的，为了同时兼顾了首页的渲染速度和前后端分离的开发效率，一些网站采用了首屏服务器渲染 + 其他页面前后端分离的开发模式。

 * ```
 *
 */