/**
 * @example
 *
 * ```js
    // 模块化
    // - 1、学习目标
    // - - 能够说出模块化的好处
    // - - 能够知道 CommonJS 规定了哪些内容
    // - - 能够说出 Node.js 中模块的三大分类各自是什么
    // - - 能够使用 npm 管理包
    // - - 能够了解什么是规范的包结构
    // - - 能够了解模块的加载机制
    // - 2、学习目录
    // - - 模块化的基本概念
    // - - Node.js 中模块的分类
    // - - npm 与包
    // - - 模块的加载机制
    // - 3、什么是模块化
    // - - 模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元
    // - - 1）现实中的模块化：游戏卡带
    // - - 2）编程领域中的模块化
    // - - - 编程领域中的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块。
    // - - - 把代码进行模块化拆分的好处：
    // - - - -（1）提高了代码的复用性
    // - - - -（2）提高了代码的可维护性
    // - - - -（3）可以实现按需加载
    // - - 3）模块化规范
    // - - - 模块化规范就是对代码进行模块化的拆分与组合时，需要遵守的那些规则
    // - - - 例如：
    // - - - - 使用什么样的语法格式来引用模块
    // - - - - 在模块中使用什么样的语法格式向外暴露成员
    // - - - 模块化规范的好处：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。
    // - 4、模块的分类：内置、自定义、第三方
    // - - Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是：
    // - - - 内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）
    // - - - 自定义模块（用户创建的每个 .js 文件，都是自定义模块）
    // - - - 第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）
    // - 5、加载模块：require()
    // - - 使用强大的 require() 方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。例如：
    // - - - 加载内置的 fs 模块
    const fs = require('fs')
    // - - - 加载用户的自定义模块
    const custom = require('./custom.js')
    // - - - 加载第三方模块（关于第三方模块的下载和使用，会在后面的课程中进行专门的讲解）
    const moment = require('moment')
    // - - - 注意：
    // - - - - 使用 require() 方法加载其它模块时，会执行被加载模块中代码
    // - - - - require() 加载可以省略 .js 的后缀名
 * ```
 * 
 */